{"ast":null,"code":"var _jsxFileName = \"/home/muhammed/Desktop/react/sifre-yonetici/src/components/button/button.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport cx from 'classnames';\nimport './button.scss';\n\nconst Button = (_ref) => {\n  let {\n    red,\n    green,\n    blue,\n    children\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"red\", \"green\", \"blue\", \"children\"]);\n\n  const btnClass = cx(\"btn\", {\n    \"btn-red\": red,\n    \"btn-green\": green\n  });\n  return __jsx(\"button\", _extends({\n    className: btnClass\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }), children);\n};\n\nexport default Button;","map":{"version":3,"sources":["/home/muhammed/Desktop/react/sifre-yonetici/src/components/button/button.tsx"],"names":["React","cx","Button","red","green","blue","children","rest","btnClass"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAgC,OAAhC;AACA,OAAOC,EAAP,MAAe,YAAf;AAEA,OAAO,eAAP;;AAQA,MAAMC,MAAwB,GAAG,UAM3B;AAAA,MAN4B;AAC9BC,IAAAA,GAD8B;AAE9BC,IAAAA,KAF8B;AAG9BC,IAAAA,IAH8B;AAI9BC,IAAAA;AAJ8B,GAM5B;AAAA,MADCC,IACD;;AAEF,QAAMC,QAAQ,GAAGP,EAAE,CACf,KADe,EAEf;AACI,eAAYE,GADhB;AAEI,iBAAaC;AAFjB,GAFe,CAAnB;AASA,SACI;AAAQ,IAAA,SAAS,EAAEI;AAAnB,KAAiCD,IAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACKD,QADL,CADJ;AAKH,CAtBD;;AAwBA,eAAeJ,MAAf","sourcesContent":["import React, { Children } from 'react';\nimport cx from 'classnames';\n\nimport './button.scss';\n\ntype Props = JSX.IntrinsicElements['button'] & {\n    red?: boolean;\n    green?: boolean;\n    blue?: boolean; \n}\n\nconst Button : React.FC<Props> = ({\n    red,\n    green,\n    blue,\n    children,\n    ...rest\n}) => {\n\n    const btnClass = cx(\n        \"btn\",\n        {\n            \"btn-red\":  red,\n            \"btn-green\": green\n        }\n\n    );\n\n    return(\n        <button className={btnClass} {...rest}>\n            {children}\n        </button>\n    );\n}\n\nexport default Button;"]},"metadata":{},"sourceType":"module"}